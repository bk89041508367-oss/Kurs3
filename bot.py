import os
import requests
import asyncio
from datetime import datetime, timedelta
from telegram import Bot
from telegram.constants import ParseMode

# === –û–ë–•–û–î –î–õ–Ø RENDER WEB SERVICES ===
if "RENDER" in os.environ:
    import http.server
    import socketserver
    from threading import Thread
    
    def run_dummy_server():
        PORT = 8000
        with socketserver.TCPServer(("", PORT), http.server.SimpleHTTPRequestHandler) as httpd:
            print(f"‚úÖ HTTP server running on port {PORT}")
            httpd.serve_forever()
    
    server_thread = Thread(target=run_dummy_server, daemon=True)
    server_thread.start()

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7984110017:AAEopXIz-0wFOsXlOeWeLvJTzlijxyPLyrU')
CHANNEL_ID = os.environ.get('CHANNEL_ID', '@FinRadar67')

# –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–•
if not BOT_TOKEN or BOT_TOKEN == 'BOT_TOKEN':
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN")
    exit(1)

if not CHANNEL_ID or CHANNEL_ID == '@FinRadar67':
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω CHANNEL_ID")
    exit(1)

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–£–†–°–û–í ===
def get_usd_rub():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å USD/RUB"""
    try:
        url = "https://www.cbr-xml-daily.ru/daily_json.js"
        response = requests.get(url, timeout=10)
        data = response.json()
        current_rate = data['Valute']['USD']['Value']
        previous_rate = data['Valute']['USD']['Previous']
        change = ((current_rate - previous_rate) / previous_rate) * 100
        change_str = f"({change:+.1f}%)"
        return f"{current_rate:.2f} ‚ÇΩ {change_str}"
    except:
        return "‚ùå –û—à–∏–±–∫–∞"

# ... –û–°–¢–ê–õ–¨–ù–´–ï –í–ê–®–ò –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ...

def get_eur_rub():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å EUR/RUB"""
    try:
        url = "https://www.cbr-xml-daily.ru/daily_json.js"
        response = requests.get(url, timeout=10)
        data = response.json()
        current_rate = data['Valute']['EUR']['Value']
        previous_rate = data['Valute']['EUR']['Previous']
        change = ((current_rate - previous_rate) / previous_rate) * 100
        change_str = f"({change:+.1f}%)"
        return f"{current_rate:.2f} ‚ÇΩ {change_str}"
    except:
        return "‚ùå –û—à–∏–±–∫–∞"

def get_cny_rub():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å CNY/RUB"""
    try:
        url = "https://www.cbr-xml-daily.ru/daily_json.js"
        response = requests.get(url, timeout=10)
        data = response.json()
        current_rate = data['Valute']['CNY']['Value']
        previous_rate = data['Valute']['CNY']['Previous']
        change = ((current_rate - previous_rate) / previous_rate) * 100
        change_str = f"({change:+.1f}%)"
        return f"{current_rate:.2f} ‚ÇΩ {change_str}"
    except:
        return "‚ùå –û—à–∏–±–∫–∞"

def get_thb_rub():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å THB/RUB"""
    try:
        url = "https://www.cbr-xml-daily.ru/daily_json.js"
        response = requests.get(url, timeout=10)
        data = response.json()
        current_rate = data['Valute']['THB']['Value']
        previous_rate = data['Valute']['THB']['Previous']
        change = ((current_rate - previous_rate) / previous_rate) * 100
        change_str = f"({change:+.1f}%)"
        return f"{current_rate:.4f} ‚ÇΩ {change_str}"
    except:
        return "‚ùå –û—à–∏–±–∫–∞"

def get_vnd_rub():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å 1000 VND –∫ RUB"""
    try:
        url = "https://www.cbr-xml-daily.ru/daily_json.js"
        response = requests.get(url, timeout=10)
        data = response.json()
        usd_rate = data['Valute']['USD']['Value']
        rub_per_1000vnd = (usd_rate / 23000) * 1000
        return f"1000‚Ç´ = {rub_per_1000vnd:.2f} ‚ÇΩ"
    except:
        return "‚ùå –û—à–∏–±–∫–∞"

def get_gold_rub():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –∑–æ–ª–æ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö"""
    try:
        # –ö—É—Ä—Å –∑–æ–ª–æ—Ç–∞ –≤ USD
        gold_usd = 1950.50
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD/RUB
        url = "https://www.cbr-xml-daily.ru/daily_json.js"
        response = requests.get(url, timeout=10)
        data = response.json()
        usd_rate = data['Valute']['USD']['Value']
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏
        gold_rub = gold_usd * usd_rate
        return f"{gold_rub:,.0f} ‚ÇΩ".replace(",", " ")
    except:
        return "‚ùå –û—à–∏–±–∫–∞"

def create_message():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å –≤–∞–ª—é—Ç–∞–º–∏"""
    usd = get_usd_rub()
    eur = get_eur_rub()
    cny = get_cny_rub()
    thb = get_thb_rub()
    vnd = get_vnd_rub()
    gold = get_gold_rub()
    
    # –í—Ä–µ–º—è
    msk_time = datetime.now().strftime("%H:%M:%S %d.%m.%Y")
    irk_time = (datetime.now() + timedelta(hours=5)).strftime("%H:%M:%S %d.%m.%Y")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    usd_value = usd.split()[0] if '‚ùå' not in usd else '‚ùå'
    eur_value = eur.split()[0] if '‚ùå' not in eur else '‚ùå'
    
    message = f"""
üíµUSD: {usd_value} üí∂EUR: {eur_value}

üìä –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ö–£–†–°–´ (–¶–ë –†–§)

üíµ USD/RUB: {usd}
üí∂ EUR/RUB: {eur}
üá®üá≥ CNY/RUB: {cny}
üáπüá≠ THB/RUB: {thb}
üáªüá≥ VND/RUB: {vnd}
ü•á –ó–æ–ª–æ—Ç–æ: {gold}

–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:
üïê –ú–æ—Å–∫–≤–∞: {msk_time}
üïê –ò—Ä–∫—É—Ç—Å–∫: {irk_time}

*–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã*
"""
    return message

# === –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===
async def check_bot_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    
    try:
        bot = Bot(token=BOT_TOKEN)
        me = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username} ({me.first_name})")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

# === –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ===
async def main():
    print("=" * 60)
    print("üí∞ TELEGRAM –ë–û–¢ –î–õ–Ø –ö–£–†–°–û–í –í–ê–õ–Æ–¢ (–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not await check_bot_connection():
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    bot = Bot(token=BOT_TOKEN)
    
    print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª...")
    
    retry_count = 0
    max_retries = 3
    
    while True:
        try:
            if retry_count == 0:
                # –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = await bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=create_message(),
                    parse_mode=ParseMode.MARKDOWN
                )
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            else:
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                message = await bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=create_message(),
                    parse_mode=ParseMode.MARKDOWN
                )
                print("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–Ω–æ–≤o.")
                retry_count = 0
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            while retry_count < max_retries:
                try:
                    await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                    await bot.edit_message_text(
                        chat_id=CHANNEL_ID,
                        message_id=message.message_id,
                        text=create_message(),
                        parse_mode=ParseMode.MARKDOWN
                    )
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")
                    retry_count = 0
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
                    retry_count += 1
                    if retry_count >= max_retries:
                        print("üîÑ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
                        break
                    else:
                        print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries} —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(30)
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(60)
            retry_count = 0 if retry_count >= max_retries else retry_count + 1

if __name__ == "__main__":
    asyncio.run(main())



